<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" 
         "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>JSConTest - Test Framework - Basic</title>
    <meta http-equiv="Content-Script-Type" content="text/javascript"/>
    <link href="style.css" rel="stylesheet" type="text/css" />
    <script type="text/javascript" src="../js/jscontest.js"></script>
    <script type="text/javascript" src="../js/jscontest.tests.js"></script>
    <script type="text/javascript" src="../js/jscontest.contracts.js"></script>
    <script type="text/javascript" src="../js/jscontest.events.js"></script>
    <script type="text/javascript" src="../js/jscontest.events.handler.simple.js"></script>
    <script type="text/javascript" src="checker.js"></script>
  </head>

  <body onload="JSConTest.tests.run()">
    <h1>JSConTest - Test Framework - Basic</h1>
    
    <p>This test suite runs a lot of basic contracts against a set
    	of values. It is expected to test 187 contracts. 29 should
    	be verified, 147 should fail, and 11 should exists with an
    	error. This is checked automatically, since 
        two event handlers are registered. One checks if the contract
 		behaves as expected. The other prints the usual contract 
 		output to the page.     
 	</p>
 		
 	<p>	If something unexpected happens, the first event handler will 
 		add an log message into the error box below. This may indicate, 
 		that JSConTest does not work correctly in your browser, either
 		due to the fact that your browser does not support a feature JSConTest
 		rely on, or because JSConTest has an error. 
    </p>
    
	<div style="background-color: #999;">
		<h2>Error log:</h2>
		<p id="checker" style="color: #A00;"></p>
	</div>
    <div id="logger"></div>
    

    <script type="text/javascript">
    	function fail(s) {
    		document.getElementById("checker").innerHTML += s + "<br />";
    	}
		var anz = 1;

		var u = JSConTest.contracts.Name("u");
		JSConTest.contracts.Let("u",JSConTest.contracts.Union(JSConTest.contracts.Undefined, u));
		var x = JSConTest.contracts.Name("x");
		JSConTest.contracts.Let("x",JSConTest.contracts.Union(JSConTest.contracts.Undefined,JSConTest.contracts.String));

		var dl = JSConTest.events.handler.simple.create("logger","ul");
		JSConTest.events.register(dl);		
		var contr = [
			JSConTest.contracts.Null,
			JSConTest.contracts.Undefined,
			JSConTest.contracts.True,
			JSConTest.contracts.False,
			JSConTest.contracts.Boolean,
			JSConTest.contracts.Integer,
			JSConTest.contracts.IIntervall(0,5),
			JSConTest.contracts.Number,
			JSConTest.contracts.String,
			JSConTest.contracts.Object,
			JSConTest.contracts.Array(JSConTest.contracts.Boolean),
			JSConTest.contracts.Array(JSConTest.contracts.Top),
			JSConTest.contracts.Union(JSConTest.contracts.Object,JSConTest.contracts.Null),
			JSConTest.contracts.Union(JSConTest.contracts.Object,JSConTest.contracts.String),
			JSConTest.contracts.Union(JSConTest.contracts.True,JSConTest.contracts.Boolean),
			u,
			x
		];
		var vals = [
			{v: null, d: "Null"},
			{v: undefined, d: "Udf"},
			{v: true, d: "True"},
			{v: false, d: "False"},
			{v: 0, d: "Integer"},
			{v: Number.NaN, d: "NaN" },
			{v: 1.5, d: "Float"},
			{v: "str", d: "String"},
			{v: {}, d: "Obj" },
			{v: [1,2], d: "Array[int]" },
			{v: [true,false,true], d: "Array[boolean]" },
		];
		for (var j in vals) {
			var v = vals[j].v;
			var d = vals[j].d;
			for (var i in contr) {
				JSConTest.tests.add(d, v, contr[i],anz);
				// success, fail, error
			}
		}
      
		var dl = JSConTest.events.handler.simple.create('logger',"ul");
		JSConTest.events.register(dl);
      
      
		var ch = checker(['stat','CExpStart'],[
	        // Null
			{ msg: 'moduleChange' },
			{ msg: 'fail' },
			{ msg: 'error' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'success' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'success' },
			 // Udf
			{ msg: 'moduleChange' },
			{ msg: 'success' },
			{ msg: 'error' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'success' },
			{ msg: 'fail' },
			 // True
			{ msg: 'moduleChange' },
			{ msg: 'fail' },
			{ msg: 'error' },
			{ msg: 'success' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'success' },
			{ msg: 'fail' },
			{ msg: 'success' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			// False
			{ msg: 'moduleChange' },
			{ msg: 'fail' },
			{ msg: 'error' },
			{ msg: 'success' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'success' },
			{ msg: 'success' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			// Integer
			{ msg: 'moduleChange' },
			{ msg: 'fail' },
			{ msg: 'error' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'success' },
			{ msg: 'success' },
			{ msg: 'success' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			// NaN
			{ msg: 'moduleChange' },
			{ msg: 'fail' },
			{ msg: 'error' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			// Float
			{ msg: 'moduleChange' },
			{ msg: 'fail' },
			{ msg: 'error' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'success' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			// String
			{ msg: 'moduleChange' },
			{ msg: 'success' },
			{ msg: 'error' },
			{ msg: 'fail' },
			{ msg: 'success' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'success' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			// Object
			{ msg: 'moduleChange' },
			{ msg: 'fail' },
			{ msg: 'error' },
			{ msg: 'fail' },
			{ msg: 'success' },
			{ msg: 'success' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'success' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			// Array[int]
			{ msg: 'moduleChange' },
			{ msg: 'fail' },
			{ msg: 'error' },
			{ msg: 'fail' },
			{ msg: 'success' },
			{ msg: 'success' },
			{ msg: 'success' },
			{ msg: 'fail' },
			{ msg: 'success' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			// Array[boolean]
			{ msg: 'moduleChange' },
			{ msg: 'fail' },
			{ msg: 'error' },
			{ msg: 'fail' },
			{ msg: 'success' },
			{ msg: 'success' },
			{ msg: 'success' },
			{ msg: 'success' },
			{ msg: 'success' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
			{ msg: 'fail' },
		]);      
		JSConTest.events.register(ch);
    </script>
    
  </body>
</html>
