<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" 
         "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>JSConTest - Test Framework - Function - Simple Boolean</title>
    <meta http-equiv="Content-Script-Type" content="text/javascript"/>
    <link href="style.css" rel="stylesheet" type="text/css" />
    <script type="text/javascript" src="../js/jscontest.js"></script>
    <script type="text/javascript" src="../js/jscontest.tests.js"></script>
    <script type="text/javascript" src="../js/jscontest.events.js"></script>
    <script type="text/javascript" src="../js/jscontest.events.enum.js"></script>
    <script type="text/javascript" src="checker.js"></script>
  </head>

  <body onload="JSConTest.tests.run()">
    <h1>JSConTest - Test Framework - Function - Simple Boolean</h1>
    
    <p>This test suite run some contract checks to check
	    if the generators are working correct. 
    	There are two event handlers registered. One checks if the contract
 		behaves as expected. The other prints the usual contract 
 		output to the page.     
 	</p>
 		
 	<p>	If something unexpected happens, the first event handler will 
 		add an log message into the error box below. This may indicate, 
 		that JSConTest does not work correctly in your browser, either
 		due to the fact that your browser does not support a feature JSConTest
 		rely on, or because JSConTest has an error. 
    </p>
    
    <p>In this suite we expect two contracts to fail, and two to be
    	successful. The two failing one should produce two counter examples.
    </p>

    
	<div style="background-color: #999;">
		<h2>Error log:</h2>
		<p id="checker" style="color: #A00;"></p>
	</div>
    <div id="logger"></div>

    <script type="text/javascript">
		function genBoolean(p1, p2) {
			if (JSConTest.check.isBoolean(p1) 
					&& JSConTest.check.isBoolean(p2)) {
				return true;
			}
			return "Error"; 
		}
		function genNumber(f) {
			if (JSConTest.check.isNumber(f)) {
				return true;
			}
			return "Error";
		}

		function genBooleanFail(p1, p2) {
			if ( p1 && p2 ) {
				return "Error";
			} else {
				return false;
			}
		}
		function genNumberFail(f) {
			if (f > 0) {
				return "Error";
			} else {
				return false;
			}
		}
		
      	var anz = 100000;
	    JSConTest.tests.add("genBoolean", 
	    		genBoolean, 
	    		JSConTest.tests.Function([JSConTest.tests.Boolean,
	    								  JSConTest.tests.Boolean],
	    								 JSConTest.tests.Boolean),
	    		anz);
	    JSConTest.tests.add("genNumber", 
	    		genNumber, 
	    		JSConTest.tests.Function([JSConTest.tests.Number],
	    								 JSConTest.tests.Boolean),
	    		anz);

	    JSConTest.tests.add("genBooleanFail", 
	    		genBooleanFail, 
	    		JSConTest.tests.Function([JSConTest.tests.Boolean,
	    								  JSConTest.tests.Boolean],
	    								 JSConTest.tests.Boolean),
	    		anz);
	    JSConTest.tests.add("genNumberFail", 
	    		genNumberFail, 
	    		JSConTest.tests.Function([JSConTest.tests.Number],
	    								 JSConTest.tests.Boolean),
	    		anz);
      
		var dl = JSConTest.events.enum.create('logger',"ul");
		JSConTest.events.register(dl);
		var ch = checker(['stat'],[
   			// genBoolean
   			{ msg: 'moduleChange' },
   			{ msg: 'success' },
   			// genFloat
		    { msg: 'moduleChange' },
			{ msg: 'success' },
   			// genBooleanFail
   			{ msg: 'moduleChange' },
   			{ msg: 'fail' },
   			// genNumberFail
   			{ msg: 'moduleChange' },
   			{ msg: 'fail' },
			// Counter Examples
			{ msg: 'CExpStart' },
			{ msg: 'CExp' },
			{ msg: 'CExp' },
		]);
		JSConTest.events.register(ch);
    </script>
    

  </body>
</html>
