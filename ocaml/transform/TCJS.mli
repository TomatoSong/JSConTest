(** Transforms Contracts from abstract represenation into
    JavaScript. 
    @author: Phillip Heidegger
*)
open AST


type 'a env = {
  tests: bool;
  asserts: bool;
  js_namespace: string;
  js_test_namespace: string;
  js_contract_namespace: string;
  variable_prefix: string;
  effects_env: 'a;
}

module type TRANS = sig
  type t
  val transform : t 
    -> bool option 
    -> 'c source_element list 
    -> 'c source_element list
  val before_wrapper : t -> 'c identifier list -> 'c expression -> 'c expression
  val after_wrapper : t -> 'c identifier list -> 'c expression -> 'c expression
end

(** Signature of the Make functor. *)  
module type S = sig
  type t

  (** [transform env p] transforms all 
      contracts in [p] into a JavaScript representation. 
      
      [tests] specifies if code for test case generation is
      generated.
      [asserts] specifies if asserts are generated.
      [effect] specifies if function may be wraped into a transaction.
      [effect_observation] specifies, if css-effects are observed.
      [js_trans_namespace] is the prefix of the transaction library.
      [js_test_namespace] is the prefix of the test framework library.
      [variable_prefix] is the prefix for all variables generated by
      the function.
  *)
  val transform : t env
    -> (BaseContract.t, Analyse.t,Depend.t,unit) Contract.t program 
    -> unit program
end

module Make(T: TRANS) : S with type t = T.t
